#!/usr/bin/perl

# Copyright (C) 2024 Keith Thompson

# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;

use File::Spec ();
use Getopt::Long ();
use Cwd ();

$SIG{INT} = \&handler;

my $program_name = (File::Spec->splitpath($0))[2];
my $cwd = Cwd::getcwd();
chomp $cwd;

my %opt = ( delimiter => ',' );
my @opts = ( \%opt,
             qw( help|h|usage!
                 long-help!
                 debugging!
                 rcs!
                 cvs!
                 svn!
                 git!
                 format|fmt=s
                 format-help|fmt-help|help-format|help-fmt!
                 bynumber!
                 bytimestamp|bydate!
                 utc!
                 raw!
                 byhash!
                 hash-length=i
                 hash8!
                 hash11!
                 follow!
                 last=i
                 delimiter=s
                 infix!
                 windows!
                 padding=i
                 2!
                 3!
                 4!
                 mtime!
                 trace!
                 quiet! ) );
Getopt::Long::GetOptions @opts or short_usage();
short_usage() if $opt{help};
long_usage()  if $opt{'long-help'};
format_help() if $opt{'format-help'};
if (defined $opt{padding}) {
    if ($opt{padding} < 0) {
        short_usage("Padding value must be non-negative\n");
    }
}
elsif ($opt{4}) { $opt{padding} = 4; }
elsif ($opt{3}) { $opt{padding} = 3; }
elsif ($opt{2}) { $opt{padding} = 2; }
else            { $opt{padding} = 0; }
if ($opt{windows}) {
    $opt{delimiter} = '__';
    $opt{infix} = 1;
}
if ($opt{hash8} or $opt{hash11}) {
    my $hash = $opt{hash11} ? '%11h' : '%8h';
    if ($opt{infix}) {
        $opt{format} = "%p%d%3n-%t-$hash%s";
    }
    else {
        $opt{format} = "%f%d%3n-%t-$hash";
    }
}
if (defined $opt{last} and $opt{last} <= 0) {
    short_usage("Argument to -last must be positive\n");
}
if (defined $opt{'hash-length'} and $opt{'hash-length'} <= 0) {
    short_usage("Argument to -hash-length must be positive\n");
}

if ($opt{utc} and $opt{raw}) {
    short_usage("-utc and -raw options are incompatible");
}

# fatal "\$cwd ($cwd) not writable\n" if not -w $cwd;

my $method = undef;
my %method_requested = ();
$method_requested{rcs} = 1 if $opt{rcs};
$method_requested{cvs} = 1 if $opt{cvs};
$method_requested{svn} = 1 if $opt{svn};
$method_requested{git} = 1 if $opt{git};
debug(">>> Methods requested: (", join(' ', keys %method_requested), ")\n");
if (scalar keys %method_requested == 0) {
    my @avail = available_methods();
    debug(">>> \@avail = (@avail)\n");
    if (scalar @avail == 0) {
        short_usage("No methods available\n");
    }
    elsif (scalar @avail == 1) {
        $method = $avail[0];
    }
    else {
        short_usage("Multiple methods available: @avail\n");
    }
}
elsif (scalar keys %method_requested == 1) {
    $method = (keys %method_requested)[0];
}
else {
    short_usage("Specify only one of -rcs, -cvs, -svn, -git\n");
}

if ($method eq 'rcs') {
    $opt{mtime} = 1 if not $opt{mtime};
}
else {
    if ($opt{mtime}) {
        short_usage("-mtime option is currently supported only for RCS\n");
    }
}

if ($method eq 'git') {
    if (not $opt{bynumber} and not $opt{bytimestamp} and not $opt{byhash}) {
        $opt{bynumber} = 1;
    }
}

my $cmd;
if    ($method eq 'rcs')   { $cmd = 'co' }
elsif ($method eq 'cvs')   { $cmd = 'cvs' }
elsif ($method eq 'svn')   { $cmd = 'svn' }
elsif ($method eq 'git')   { $cmd = 'git' }
else                       { die "Internal error, \$method = \"$method\"" }

my $filename = undef;
my @revisions = ();

foreach my $arg (@ARGV) {
    if (not defined $filename) {
        $filename = $arg;
    }
    else {
        push @revisions, extract_revisions($arg, $filename);
    }
}
short_usage("Not enough arguments\n") if not defined $filename;

if (scalar @revisions == 0) {
    #
    # If no revisions are specified, get latest revision and append
    # ",_" to file name.
    # Examples:
    #    "get-versions foo 1.5"   creates foo,1.5
    #    "get-versions foo"       creates foo,_
    #
    push @revisions, undef;
}

my @extra_args = ("$filename,v");

debug("Looking for $cmd\n");
{
    my $found_it = 0;

    DIR:
    foreach my $dir ( split /:/, $ENV{PATH }) {
        if (-x "$dir/$cmd") {
            debug("Found $dir/$cmd\n");
            $found_it = 1;
            last DIR;
        }
    }
    if (not $found_it) {
        die "$program_name: $cmd command not found in \$PATH\n";
    }
}

my $tmp_dir = undef;

if ($method eq 'rcs') {
    my $now = time;
    $tmp_dir = ".get-versions-$now-$$";
    mkdir $tmp_dir, 0700;
}

REVISION:
foreach my $revision (@revisions) {
    my $revision_string; # e.g., ",1.42"

    if (defined $revision) {
        $revision_string = $revision;
        if (defined $opt{padding}) {
            $revision_string =~ s/(\d+)$/sprintf("%0*d", $opt{padding}, $1)/e;
        }
    }
    else {
        $revision_string = '_';
    }
    my $target_file = target_name($filename, $revision_string);

    if ($method eq 'rcs') {
        my @revision_arg;
        if (defined $revision) {
            if ($opt{mtime}) {
                @revision_arg = ("-M$revision");
            }
            else {
                @revision_arg = ("-r$revision");
            }
        }
        else {
            @revision_arg = ();
        }

        my @command = ('co', @revision_arg, @extra_args, "$tmp_dir/$filename");
        if ($opt{trace}) {
            print "% @command\n";
        }

        debug("@command\n");
        if ($opt{quiet}) {
             open SAVE_STDOUT, ">&STDOUT";
             open SAVE_STDERR, ">&STDERR";
             open STDOUT, ">/dev/null";
             open STDERR, ">/dev/null";
        }
        system @command;
        if ($opt{quiet}) {
             open STDOUT, ">&SAVE_STDOUT";
             open STDERR, ">&SAVE_STDERR";
        }

        if ($opt{trace}) {
            print "% rename $tmp_dir/$filename, $target_file\n";
        }
        rename "$tmp_dir/$filename", $target_file;
    }
    elsif ($method eq 'cvs') {
        my @cvs_args = qw(update -p);
        if (defined $revision) {
            push @cvs_args, '-r', $revision;
        }

        my @command = ($cmd, @cvs_args, @extra_args, $filename);
        if ($opt{trace}) {
            print "% @command\n";
        }
        debug("@command\n");
        if (-e $target_file) {
            warn ">>> $target_file already exists\n";
            next REVISION;
        }
        open SAVE_STDOUT, ">&STDOUT";
        open STDOUT, ">$target_file";
        if ($opt{quiet}) {
            open SAVE_STDERR, ">&STDERR";
            open STDERR, ">/dev/null";
        }
        system @command;
        open STDOUT, ">&SAVE_STDOUT";
        if ($opt{quiet}) {
            open STDERR, ">&SAVE_STDERR";
        }
        make_read_only($target_file);
    }
    elsif ($method eq 'svn') {
        my @command = ($cmd, 'cat');
        if (defined $revision) {
            push @command, "$filename\@$revision";
        }
        else {
            push @command, $filename;
        }
        if ($opt{trace}) {
            print "% @command\n";
        }
        debug("@command\n");
        if (-e $target_file) {
            warn ">>> $target_file already exists\n";
            next REVISION;
        }
        open SAVE_STDOUT, ">&STDOUT";
        open STDOUT, ">$target_file";
        if ($opt{quiet}) {
            open SAVE_STDERR, ">&STDERR";
            open STDERR, ">/dev/null";
        }
        system @command;
        open STDOUT, ">&SAVE_STDOUT";
        if ($opt{quiet}) {
            open STDERR, ">&SAVE_STDERR";
        }
        make_read_only($target_file);
    }
    elsif ($method eq 'git') {
        my @versions = ();
        my @command = qw(git log --date=raw --no-decorate);
        push @command, '--follow' if $opt{follow};
        push @command, '--', $filename;
        if ($opt{trace}) {
            print "% @command\n";
        }
        open my $LOG, '-|', @command or die "git log: $!\n";
        my $commit = undef;
        my $timestamp = undef;
        while (my $line = <$LOG>) {
            if ($line =~ /^commit\s+(.*)$/) {
                $commit = $1;
            }
            elsif ($line =~ /^Date:\s+(\d+)/) {
                $timestamp = $1;
            }
            if (defined $commit and defined $timestamp) {
                unshift @versions, { commit => $commit,
                                     timestamp => $timestamp,
                                     filename => $filename };
                undef $commit;
                undef $timestamp;
            }
        }
        close $LOG;
        my $num = 0;
        foreach my $version (@versions) {
            $version->{num} = ++$num;
        }
        if (defined $opt{last} and $opt{last} < scalar @versions) {
            splice @versions, 0, scalar @versions - $opt{last};
        }
        foreach my $version (@versions) {
            my $target;
            if (defined $opt{format}) {
                $target = formatted_string($opt{format}, $version);
            }
            else {
                my @parts = ();
                if ($opt{bynumber}) {
                    push @parts, sprintf("%0*d", $opt{padding}, $version->{num});
                }
                if ($opt{bytimestamp}) {
                    push @parts, time_image($version->{timestamp});
                }
                if ($opt{byhash}) {
                    my $hashlen = $opt{'hash-length'};
                    if (not defined $hashlen or $hashlen == 0) {
                        push @parts, $version->{commit};
                    }
                    else {
                        push @parts, substr($version->{commit}, 0, $hashlen);
                    }
                }
                $target = target_name($filename, join('-', @parts));
            }
            my $command = "git show '$version->{commit}:./$filename' > '$target'";
            if ($opt{trace}) {
                print "% $command\n";
            }
            my $result = system $command;
            my $target_exists = 1;
            if ($result != 0) {
                warn sprintf "git show failed, system() returned 0x%x\n", $result;
                if (-z $target) {
                    unlink $target;
                    $target_exists = 0;
                }
                else {
                    warn "File $target is not empty (?)\n";
                }
            }
            if ($target_exists) {
                make_read_only($target);
            }
        }
    }
    else {
        die "Internal error, \$method = \"$method\"\n";
    }

}

cleanup();

# ----------------------------------------------------------------------

sub debug {
    print @_ if $opt{debugging};
}

sub handler {
    my($signal) = @_;
    fatal("interrupted by SIG$signal\n");
}

sub fatal {
    #
    # Probably a __DIE__ handler would be better for this.
    #
    print STDERR "$program_name: ", @_;
    cleanup();
    exit 1;
}

sub cleanup {
    if (defined $tmp_dir) {
        rmdir $tmp_dir if -d $tmp_dir;
        system qw(rm -rf), $tmp_dir if -d $tmp_dir;
    }
}

sub extract_revisions {
    my($arg, $filename) = @_;
    my $first_rev = undef;
    my $last_rev  = undef;
    my $is_range  = undef;
    my $range_sep = qr/(?:-|\.\.)/;

    if ($arg =~ /^([\d.]+)$range_sep([\d.]+)$/) {
        ($first_rev, $last_rev) = ($1, $2);
        $is_range = 1;
    }
    elsif ($arg =~ /^([\d.]+)$range_sep$/) {
        $first_rev = $1;
        $last_rev = head_revision($filename);
        $is_range = 1;
    }
    else {
        $first_rev = $arg;
        $is_range = 0;
    }

    if ($is_range) {
        foreach my $rev ($first_rev, $last_rev) {
            my $rev_pattern = ($method eq 'svn' ? qr/^\d+$/
                                                : qr/^\d+(\.\d+)*$/);
            if (defined $rev and $rev !~ $rev_pattern) {
                short_usage("Invalid revision: $rev\n");
            }
        }
    }

    if (not $is_range) {
        return ( $first_rev ); # parentheses are intentional
    }

    #
    # For RCS and CVS, get all revisions in the numeric range, ignoring
    # the file name argument.
    # For SVN, get only revisions that appear in the log (the sequence
    # is often non-contiguous).
    # For Git, this function is not used.
    #
    my @result = ();
    if ($method eq 'svn') {
        my @all_revisions = svn_revisions($filename);
        foreach my $rev (@all_revisions) {
            push @result, $rev if $rev >= $first_rev and $rev <= $last_rev;
        }
    }
    else {
        my ($first_head, $first_tail) = ($first_rev =~ /^(.+)\.(\d+)$/);
        my ($last_head,  $last_tail)  = ($last_rev  =~ /^(.+)\.(\d+)$/);

        if ($first_head ne $last_head or $first_tail > $last_tail) {
            short_usage("Invalid revision range: $arg\n");
        }

        for (my $i = $first_tail; $i <= $last_tail; $i ++) {
            push @result, "$first_head.$i";
        }
    }

    return @result;
}

sub head_revision {
    my($file) = @_;
    my @command;

    if    ($method eq 'rcs') { @command = qw(rlog -h) }
    elsif ($method eq 'cvs') { @command = qw(cvs log -h) }
    elsif ($method eq 'svn') { @command = qw(svn log -r COMMITTED) }
    else                     { die "Internal error" }

    my $pattern = ($method eq 'svn' ? qr/^r(\d+)/
                                    : qr/^head: (\d+(\.\d+)*)/);
    debug("Opening pipe: @command $file\n");
    open my $PIPE, '-|', @command, $file;
    while (<$PIPE>) {
        if (/$pattern/) {
            my $result = $1;
            while(<$PIPE>) {
                # Drain the pipe
            }
            debug("Closing pipe early: @command $file\n");
            close $PIPE;
            debug("head_revision(\"$file\") = $1\n");
            return $result
        }
    }
    debug("Closing pipe: @command $file\n");
    close $PIPE;
    die "Can't determine head revision for $file\n";
}

sub svn_revisions {
    my($filename) = @_;
    my @revisions = ();
    open my $LOG, '-|', qw(svn log -q), $filename
        or die "svn log -q $filename: $!\n";
    while (<$LOG>) {
        if (/^r(\d+)/) {
            unshift @revisions, $1;
        }
    }
    close $LOG;
    debug("svn_revisions(\"$filename\") = ( @revisions )\n");
    return @revisions;
}

#
# Given a file name and a version string, returns the target file name
# For example, target_name("foo.txt", "1.1") might return either
# "foo.txt,1.1" or "foo__1.1.txt", depending on the command-line options.
#
sub target_name {
    my($name, $version) = @_;
    if ($opt{infix}) {
        my($prefix, $suffix);
        if ($name =~ /^(.+)(\..+)$/) {
            ($prefix, $suffix) = ($1, $2);
        }
        else {
            ($prefix, $suffix) = ($name, '');
        }
        return $prefix . $opt{delimiter} . $version . $suffix;
    }
    else {
        return $name . $opt{delimiter} . $version;
    }
}

sub available_methods {
    my @result = ();
    push @result, 'rcs' if -d 'RCS';
    push @result, 'cvs' if -d 'CVS';
    push @result, 'svn' if -d '.svn';
    my $dir = $cwd;
    if ($cwd !~ m|^/|) {
        die "\$cwd is not absolute: \"$cwd\"\n";
    }
    while ($dir ne '') {
        debug(">>> Checking $dir/.git\n");
        if (-d "$dir/.git") {
            push @result, 'git';
            last;
        }
        $dir =~ s|/[^/]*$||;
    }
    return @result;
}

sub make_read_only {
    my($filename) = @_;
    my @stat = stat $filename;
    if (not @stat) {
        warn "stat $filename: $!\n";
        return;
    }
    my $perms = $stat[2];
    $perms &= ~0222;
    chmod $perms, $filename or warn "chmod $filename: $!\n";
}

sub time_image {
    my($time, $num) = @_;
    $num = 6 if not defined $num or $num eq '' or $num !~ /^\d+$/ or $num < 1 or $num > 6;
    if ($opt{raw}) {
        return $time;
    }
    else {
        my($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst)
            = ($opt{utc} ? gmtime $time : localtime $time);
        my $result = sprintf "%04d-%02d-%02d-%02d%02d%02d",
                     1900+$year, 1+$mon, $mday, $hour, $min, $sec;
        my @map = ( 17, 4, 7, 10, 13, 15, 17 );
        return substr($result, 0, $map[$num]);
    }
}

sub format_n {
    my($width, $num) = @_;
    $width = 0 if $width eq '';
    return sprintf "%0${width}d", $num;
}

sub format_h {
    my($width, $hash) = @_;
    if ($width eq '') {
        return $hash;
    }
    else {
        return substr($hash, 0, $width);
    }
}

sub prefix {
    my($filename) = @_;
    (my $result = $filename) =~ s/\.[^.]*$//;
    return $result;
}

sub suffix {
    my($filename) = @_;
    if ($filename =~ /\./) {
        (my $result = $filename) =~ s/^.*\.//;
        return ".$result";
    }
    else {
        return "";
    }
}

sub formatted_string {
    # $version->{timestamp} (seconds since 1970)
    my ($format, $version) = @_;
    my($result) = $format;
    $result =~ s/%f/$version->{filename}/g;
    $result =~ s/%p/prefix($version->{filename})/eg;
    $result =~ s/%s/suffix($version->{filename})/eg;
    $result =~ s/%([0-9]*)n/format_n($1, $version->{num})/eg;
    $result =~ s/%rt/$version->{timestamp}/g;
    $result =~ s/%([0-9]*)t/time_image($version->{timestamp}, $1)/eg;
    $result =~ s/%([0-9]*)h/format_h($1, $version->{commit})/eg;
    $result =~ s/%d/$opt{delimiter}/g;
    $result =~ s/%%/%/g;
    return $result;
}

sub short_usage {
    print <<"EOF";
@{_}$program_name: Get specified revisions of a file from a version control system
Currently supported systems are RCS, CVS, SVN, and Git
Usage: $program_name [options] file [revision...]
Option names may be abbreviated uniquely
Options:
    -help, usage Display this short help message and exit
    -long-help   Display a long help message
                 Suggest `$program_name -long-help | less`
    -format-help Show documentation for the -format option
                 Also -fmt-help, -help-format, -help-fmt
EOF
    exit 1;
}

sub long_usage {
    print <<"EOF";
@{_}$program_name: Get specified revisions of a file from a version control system
Currently supported systems are RCS, CVS, SVN, and Git
Usage: $program_name [options] file [revision...]
Option names may be abbreviated uniquely
Options:
    -help, usage Display a short help message and exit
    -long-help   Display this long help message
    -format-help Show documentation for the -format option
                 Also -fmt-help, -help-format, -help-fmt 
    -rcs         Use RCS (default if there's an RCS directory)
    -cvs         Use CVS (default if there's a CVS directory)
    -svn         Use SVN (default if there's a .svn directory)
    -git         Use Git (default if there's a .git directory
                          in the current directory or any parent)
    NOTE: If more than one default is available, the method must be specified
    -format ...  Git only: specify a printf-like format; experimental
    -fmt ...     Same as -format ...
    -bynumber    Git only: assign numbers starting at 0 to use as the version
                 This is the default
                 Affected by "-padding"
    -bytimestamp Git only: use the timestamp as the version
    -bydate      Alias for -bytimestamp
    -utc         With -bytimestamp, use UTC
    -raw         With -bytimestamp, use raw Unix time
    -byhash      Git only: use the hash as the version
                 More than one of the -by* options can be given if you
                 like very long file names.
    -hash-length n  With "-byhash", use only the first n characters of the hash
    -hash8       Equivalent to -padding 3 -bynumber -byhash -hash-length 8 -bydate
    -hash11      Equivalent to -padding 3 -bynumber -byhash -hash-length 11 -bydate
    -follow      Git only: Pass "--follow" option to "git log".
                 This doesn't currently work.
    -last n      Get only last n versions (git only for now)
    -delimiter s Use the specified delimiter; default is ","
    -infix       Place the version number before the file suffix,
                 e.g., "foo,1.23.jpg" rather than "foo.jpg,1.23".
    -windows     Use options appropriate for Windows:
                     -infix -delimiter __ 
    -padding n   Pad last field of revision to n digits; default is 0.
    -2, -3, -4   Equivalent to "-padding 2", etc.
    -mtime       Set modification time of file to the date of the
                 retrieved revision.  Currently supported only for RCS.
                 Default is true for RCS, false for CVS.
    -quiet       Send RCS/CVS messages to /dev/null
    -trace       Show each command before executing it
    -debugging   Lotsa debugging output (not recommended)
Each revision argument may specify either a single revision (numeric
or symbolic), a range of numeric revisions separated by a '-' or '..', or
a numeric revision followed by a '-' or '..' (indicating a range from the
specified revision to the head (latest) revision).

RCS and CVS revisions are sequences of decimal integers separated by
'.', for example "1.42".  In the absence of branches, "1.1-" denotes
the complete history.
SVN revisions are decimal integers.  Any revisions that do not apply to
a particular file are skipped. "1-" denotes the complete history.
Git revisions are 40-digit hexadecimal SHA-1 hashes.  This program
can use hashes, dates, or small integers to denote versions.

Example: $program_name -2 .bashrc 1.5-1.7 1.10          # CVS
         $program_name -2 .bashrc 1.5..1.7 1.10
         creates the following files in the current directory:
            .bashrc,1.05
            .bashrc,1.06
            .bashrc,1.07
            .bashrc,1.10
Example: $program_name -infix -delim __ 1.7 foo.dat
         creates the following file:
            foo__1.7.dat
EOF
    exit 1;
}

sub format_help {
    print <<"EOF";
@{_}$program_name -format ...
The -format (or -fmt) option takes a printf-like format string to
specify the name of the created file.

%n    expands to an integer sequence number, starting with 1 for the
      oldest revision.  %3n, for example, pads with leading 0s to
      3 digits.
%t    expands to a timestamp in the form "YYYY-MM-DD-hhmmss"
      A number specifies the number of fields, 1..6.
      For example %3t yields "YYYY-MM-DD"; %5t yields "YYYY-MM-DD-hhmm".
%rt   expands to a raw timestamp, integer seconds since 1970
%h    expands to the hash.  %8h, for example, expands to the first 8
      digits of the hash.  %h gives the full 40-character hash.
%f    expands to the original file name
%p    expands to the prefix of the original file name, defined as
      everything up to and not including the last '.' character.
      If there is no '.'  character, expands to the entire file name.
%s    expands to the suffix (extension) of the original file name,
      defined as everything including and after the last '.' character.
      If there is no '.'  character, expands to nothing.
      %p does not include the '.'; %s does.
      %p%s is equivalent to %f.
%d    expands to the delimiter; the default ',' can be overridden by
      the -delimiter option
%%    expands to a single '%' character
Other characters (including '%') are passed through unchanged.

For example, `get-versions -format '%p__%03n.%s' foo.txt`
might create `foo__001.txt`, `foo__002.txt`, etc.
EOF
    exit 1;
}
